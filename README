1.a Para iniciar la app usamos: 
    Production (port 80): node src/app.js || npm start
    Development (Persistence = MONGODB (mongoDB)) (port 8080): node src/app.js --dev
    Development (Persistence = MEMORY (file system)) (port 8080): node src/app.js
1.b Para correr el test usamos = npm run test
2. Se incluyeron los archivos de las variables de ambiente en el .gitignore para facilitar el testing.
3. DTO productDTO agrega la propiedad "active: true" al crear un nuevo producto desde "localhost/views/product/realtimeproducts"
4. Se eleimina la información sensible en session.router.js antes de devolverlo al frontend a traves del userDTO.js.
5. Se agrego el psot /:cid/purchase al que solamente puede acceder un cliente con role : user.

CORRECCIONES de TUTOR: 
1. Se agregó un cart.handlebars para la vista del carrito y la compra.
2. Se agregó el envío de mail al cerra la compra.
6. Agregué un campo "tickets" al modelo de "user" para guardar el id del ticket que genere con la compra.

7. En el caso de que se intente agergar un nuevo carrito a un usario que ya tenga uno sin cerrar, se devolverá el error "El usuario ya tiene un carrito abierto".

-------Información adicional-------

##Mongo Atlas

MAIL: refrossrocha@gmail.com
USER: msosa
CLAVE: sjuGVQbrc6PC09Em

1. En este link (localhost:8080/views/products/realtimeproducts) podemos ver, agregar y eliminar los productos en tiempo real desde MongoDB-Atlas
2. En este link (localhost:8080/views/chat) podemos acceder al chat en tiempo real

### USUARIOS: 

USER: adminCoder@coder.com
CLAVE: Cod3r123
Role: ADMIN


USER: user@user.com
CLAVE: user098
Role: USER

### CLAVE GOOGLE GMAIL

ifpp omlx zwzb rmoc


### Privilegios:

ADMIN: Ademas de tener acceso a los mismos endpoints que USER, puede eliminar, modificar y agregar nuevos productos

USER: Puede acceder a todos los endpoints de "carts.router.js", de los endpoints de "products.router.js" solamente puede leer la lista de productos y hacer una busqueda por ID.

## NOTAS:

La validación del token se hace en el archivo src/auth/authentication.js
Al loguearse con usuario y contraseña se redirige al usuario al endpoint /session/current el cual valida el token a traves de la signedCookie.

// "test": "echo \"Error: no test specified\" && exit 1",

Geroduct:

try {
    if () {
        CustomError.createError({
          status: 400,  
          message: `${el.name.toUpperCase()} errorMessage[value]`,
          code: EErrors.INVALID_TYPES_ERROR,
          cause: generateAddProductErrorInfo({
            title,
            description,
            code,
            price,
            status,
            stock,
            category,
            thumbnails,
          }),
        });
    }
} catch (error) {
    console.error(error.message, error.cause);
    return res.status(error.status).send(handleError(error));
}

